// pull out any uneccessary calculations and stuff from audio callback (put in swarm.update?)


// wave window:  end point is button2/touch2 not y, y is volume?



// voice count slider at 1 leaves 2 voices??????? (not always...?)



// add support for stereo wavs (and output)

// add support for 32bit wavs (maybe convert 16 internally to 32 anyway)


// implement recording (mostly easy I think)


// once stereo is go, add panning options/slider(s) too?


// ????
// need to scale volume down per voice
// convert to 32 bit for more headroom? then normalize before outputing?


// clean, refactor, bugs/issues, ui/colors, tweak values/ranges, comment, etc.



set_pixel_size(1)

resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )



include "constants.pixi"
include "util.pixi"

include "wave_window.pixi"
include "swarm.pixi"
include "audiocallback.pixi"

include "slider.pixi"
include "sliders.pixi"

include "button.pixi"
include "buttons.pixi"




load_wav()



buttons = create_buttons()

sliders = create_sliders()

touch_state = new()
touch_state.down = 0
touch_state.up = 0
touch_state.move = 0



set_audio_callback(audio_callback, 0, 44100, get_type( wave_window.data ), 1 ,AUDIO_FLAG_INTERP2 )



while (1)
{
    while get_event()
    {
        touch_state.down = 0
        touch_state.up = 0
        touch_state.move = 0 
               
        if EVT[EVT_TYPE] == EVT_QUIT { cleanup() }
        
        if EVT[EVT_TYPE] == EVT_MOUSEBUTTONUP
            { touch_state.up = 1 }
        
  		if EVT[EVT_TYPE] == EVT_MOUSEMOVE 
            { touch_state.move = 1 }
        
  		if EVT[EVT_TYPE] == EVT_MOUSEBUTTONDOWN 
            { touch_state.down = 1 }
  		
  	  		
  	    touch_state.x = EVT[ EVT_X ]
  		touch_state.y = EVT[ EVT_Y ]
  		
  		
  		wave_window.update(wave_window, touch_state)
  		buttons.update(buttons, touch_state)
  		
  		sliders.update(sliders, touch_state)
  		
  		swarm.update(swarm, sliders)
  	}
  	
  	
  	
  	clear(get_blend(BLACK, WHITE, 130))
  	
  	
  	wave_window.draw(wave_window)
  	buttons.draw(buttons)
  	
  	sliders.draw(sliders)
  	
  	s = ""
  	sprintf(s, "%f   %f   %f", swarm.base_speed, swarm.speeds[0], swarm.speeds[1])
  	print(s, 0, 20)
  	
  	frame()
  	
  	
}



fn cleanup()
{

    set_audio_callback(-1)
    
    
    
    halt
}



fn load_wav()
{

    set_audio_callback(-1)
    $file = file_dialog( "Select a wav file", "wav", "fff" )
    if $file > -1
    {
        if wave_window
        {
            remove(wave_window)
            remove(swarm)
        }
        
        
        $wav_data = load($file)
        
        swarm = create_swarm($wav_data)
        swarm.init_swarm(swarm)
        wave_window = create_wave_window(XMIN + BORDER, WAVE_Y, WAVE_WIDTH, WAVE_HEIGHT)

    }
    set_audio_callback(audio_callback, 0, 44100, get_type( swarm.wav_data ), 1 ,AUDIO_FLAG_INTERP2 )
}


  		
